abundance_models <- set_models (mean_class="main", err_class= c("abundance"), method = "crossed") # for sigm
# 1
Pars_c <- create_default_par_list (count_models)
# 2 - define and fit the models:
fitted_models_abu <- purrr::map(subsets_taxons, function(data_subset) {
msenlm(models = count_models, data = data_subset, xvar = "depth", yvar = "abundance", conf.level=0.95)})
# 3 - Create a list of the top abundance models (based on AIC values) for each taxon:
best_models_a <- purrr::map(taxas, ~ {
taxa_models <- fitted_models_abu[[.x]]$abundance
aic_values <- purrr::map_dbl(taxa_models, ~.x$IC["AIC"])
names(aic_values) <- names(taxa_models)
ordered_aic_values <- sort(aic_values)
head(ordered_aic_values)
})
# 4 - Extract the best model for each taxon:
model_summaries_a <- purrr::map(taxas, ~ {
taxa_data <- fitted_models_abu[[.x]]
summary(msenlm.best(taxa_data, best="AICc"))
})
# 1
Pars_c_2 <- create_default_par_list (count_models)
# 2 - define and fit the models:
fitted_models_rich <- purrr::map(subsets_taxons, function(data_subset) {
msenlm(models = count_models, data = data_subset, xvar = "depth", yvar = "richness", conf.level=0.95)})
# 3 - Create a list of the top richness models (based on AIC values) for each taxon:
best_models_r <- purrr::map(taxas, ~ {
taxa_models <- fitted_models_rich[[.x]]$richness
aic_values <- purrr::map_dbl(taxa_models, ~.x$IC["AIC"])
names(aic_values) <- names(taxa_models)
ordered_aic_values <- sort(aic_values)
head(ordered_aic_values)
})
# 4 - Extract the best model for each taxon:
model_summaries_r <- purrr::map(taxas, ~ {
taxa_data <- fitted_models_rich[[.x]]
summary(msenlm.best(taxa_data, best="AICc"))
})
# save the models output:
setwd(wd_processed_data)
write.csv(fitted_models_abu, file = "fitted_models_abu.csv")
write.csv(fitted_models_rich, file = "fitted_models_rich.csv")
write.csv(best_models_r, file = "best_models_r.csv")
write.csv(best_models_a, file = "best_models_a.csv")
View(fitted_models_abu)
# devtools::install_github("PRIMER-e/senlm")
library(dplyr)
library(tidyr)
library(senlm)
# devtools::install_github("PRIMER-e/senlm")
library(dplyr)
library(tidyr)
library(senlm)
# devtools::install_github("PRIMER-e/senlm")
library(dplyr)
library(tidyr)
library(senlm)
library(dplyr)
library(tidyr)
library(senlm)
# wd:
wd_processed_data <- "C:/Users/inbar/OneDrive/desktop/r/chapter_2/MoBr/data/processed"
source("C:/Users/inbar/OneDrive/desktop/r/chapter_2/MoBr/r_scripts/model_fitting.R")
# devtools::install_github("PRIMER-e/senlm")
library(dplyr)
library(tidyr)
library(senlm)
# wd:
wd_processed_data <- "C:/Users/inbar/OneDrive/desktop/r/chapter_2/MoBr/data/processed"
# wd:
wd_processed_data <- "C:/Users/inbar/OneDrive/desktop/r/chapter_2/MoBr/data/processed"
# read:
setwd(wd_processed_data)
combined_data <- read.csv("combined_long.csv")
combined_data = combined_data %>% dplyr::select(-X)
library(mobr)         # running rarefaction analysis - for gradients
library(dplyr)
library(ggplot2)
# read
# wd
wd_processed_data <- "C:/Users/inbar/OneDrive/desktop/r/chapter_2/MoBr/data/processed"
wd_plots <- "C:/Users/inbar/OneDrive/desktop/r/chapter_2/MoBr/output/plots"
wd_results <- "C:/Users/inbar/OneDrive/desktop/r/chapter_2/MoBr/output/files"
# read data
setwd(wd_processed_data)
wide_red <- read.csv("wide_red.csv")
# removing the wired column x
wide_red = wide_red %>% dplyr::select(-X)
# define the first column of species
first_species <- 7
# create species metric
sp_matric <- wide_red[,first_species:length(wide_red)]
# if binned data required:
# 8.1 - 149 m to - 15 m bins (8 layers)
red_depth_bins <-  wide_red %>% mutate(depth_group = cut(wide_red$depth,
breaks=c(0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 149),
labels=c('7.5', '22.5', '37.5', '52.5', '67.5','82.5', '97.5', '112.5', '127.5', '142.5'))) %>%
relocate(depth_group,.after = depth)
# prepare the plot attributes data frame
plot_attr <- red_depth_bins %>% select(, c(1:7))
# Create the mob_in object
mob_in <- make_mob_in(sp_matric, plot_attr, coord_names = c('lon_x', 'lat_y'))
# Perform the MoB analysis using the depth groups
# 1 - env_var = depth_group (neads to be contineous)
delta_stats <- get_delta_stats(mob_in, 'depth_group', type = 'continuous', log_scale = TRUE, n_perm = 199)
delta_stats_not_log <- get_delta_stats(mob_in, 'depth_group', type = 'continuous', n_perm = 199)
# 2 - env_var = depth
delta_red <- get_delta_stats(mob_in, env_var = 'depth',  # define the env gradient
group_var = 'depth_group', stats = c('betas', 'r'), # define the site\grouping var
type = 'continuous', spat_algo = 'kNCN', # define the type of var # define the spatial rarefaction method
n_perm = 199, overall_p = FALSE) #, density_stat = c("mean", "max", "min")) #
### env_var = depth_group or env_var = depth completely reverses the results.
mob_in_rev <- mob_in
# Reversing Depth Order to check if it fixes the problem:
mob_in_rev$env$depth <- -mob_in_rev$env$depth  # Reverse depth sign
delta_red_rev <- get_delta_stats(mob_in_rev, env_var = 'depth',
group_var = 'depth_group', stats = c('betas', 'r'),
type = 'continuous', spat_algo = 'kNCN',
n_perm = 199, overall_p = FALSE)
# testing if log has an effect
delta_red_rev_log <- get_delta_stats(mob_in_rev, env_var = 'depth',
group_var = 'depth_group', stats = c('betas', 'r'),
type = 'continuous', spat_algo = 'kNCN',
n_perm = 199, overall_p = FALSE, log_scale = TRUE)
dev.off()
plot(delta_red_rev_log,'b1') # good option - continuous depth log
plot(delta_red_rev, 'b1')    # good option - continuous depth not log
plot(delta_stats, 'b1')      # good option - continuous depth_group log
plot(delta_stats_not_log, 'b1') #good option - continuous depth_group not log
plot(delta_red, 'b1') # wrong
plot(delta_red_rev, 'b1')    # good option - continuous depth not log
plot(delta_red, 'b1') # wrong
plot(delta_stats_not_log, 'b1') #good option - continuous depth_group not log
dev.off()
plot(delta_red_rev_log,'b1') # good option - continuous depth log
plot(delta_red_rev, 'b1')    # good option - continuous depth not log
plot(delta_stats, 'b1')      # good option - continuous depth_group log
library(mobr)# running rarefaction analysis - for gradients
library(dplyr)
library(ggplot2)
# read
# wd
wd_processed_data <- "C:/Users/inbar/OneDrive/desktop/r/chapter_2/MoBr/data/processed"
wd_plots <- "C:/Users/inbar/OneDrive/desktop/r/chapter_2/MoBr/output/plots"
wd_results <- "C:/Users/inbar/OneDrive/desktop/r/chapter_2/MoBr/output/files"
# read data
setwd(wd_processed_data)
wide_red <- read.csv("wide_red.csv")
# removing the wired column x
wide_red = wide_red %>% dplyr::select(-X)
# define the first column of species
first_species <- 7
# create species metric
sp_matric <- wide_red[,first_species:length(wide_red)]
# if binned data required:
# 8.1 - 149 m to - 15 m bins (10 breaks)
red_depth_bins <-  wide_red %>% mutate(depth_group = cut(wide_red$depth,
breaks=c(0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 149),
labels=c('7.5', '22.5', '37.5', '52.5', '67.5','82.5', '97.5', '112.5', '127.5', '142.5'))) %>%
relocate(depth_group,.after = depth)
# prepare the plot attributes data frame
plot_attr <- red_depth_bins %>% select(, c(1:7))
# Create the mob_in object
mob_in <- make_mob_in(sp_matric, plot_attr, coord_names = c('lon_x', 'lat_y'))
# Perform the MoB analysis using the depth groups
# 1 - env_var = depth_group (needs to be continuous)
delta_stats_log <- get_delta_stats(mob_in, 'depth_group', type = 'continuous', log_scale = TRUE, n_perm = 199)
delta_stats_not_log <- get_delta_stats(mob_in, 'depth_group', type = 'continuous', n_perm = 199)
library(mobr)# running rarefaction analysis - for gradients
library(dplyr)
library(ggplot2)
# read
# wd
wd_processed_data <- "C:/Users/inbar/OneDrive/desktop/r/chapter_2/MoBr/data/processed"
wd_plots <- "C:/Users/inbar/OneDrive/desktop/r/chapter_2/MoBr/output/plots"
wd_results <- "C:/Users/inbar/OneDrive/desktop/r/chapter_2/MoBr/output/files"
# read data
setwd(wd_processed_data)
wide_red <- read.csv("wide_red.csv")
# removing the wired column x
wide_red = wide_red %>% dplyr::select(-X)
# define the first column of species
first_species <- 7
# create species metric
sp_matric <- wide_red[,first_species:length(wide_red)]
# if binned data required:
# 8.1 - 149 m to - 15 m bins (10 breaks)
red_depth_bins <-  wide_red %>% mutate(depth_group = cut(wide_red$depth,
breaks=c(0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 149),
labels=c('7.5', '22.5', '37.5', '52.5', '67.5','82.5', '97.5', '112.5', '127.5', '142.5'))) %>%
relocate(depth_group,.after = depth)
# prepare the plot attributes data frame
plot_attr <- red_depth_bins %>% select(, c(1:7))
# Create the mob_in object
mob_in <- make_mob_in(sp_matric, plot_attr, coord_names = c('lon_x', 'lat_y'))
# Perform the MoB analysis using the depth groups
# 1 - env_var = depth_group (needs to be continuous)
delta_stats_log <- get_delta_stats(mob_in, 'depth_group', type = 'continuous', log_scale = TRUE, n_perm = 199)
delta_stats_not_log <- get_delta_stats(mob_in, 'depth_group', type = 'continuous', n_perm = 199)
plot(delta_stats_log, 'b1')          # good option - continuous depth_group log
plot(delta_stats_not_log, 'b1')      #good option - continuous depth_group not log
library(mobr)# running rarefaction analysis - for gradients
library(dplyr)
library(ggplot2)
# read
# wd
wd_processed_data <- "C:/Users/inbar/OneDrive/desktop/r/chapter_2/MoBr/data/processed"
wd_plots <- "C:/Users/inbar/OneDrive/desktop/r/chapter_2/MoBr/output/plots"
wd_results <- "C:/Users/inbar/OneDrive/desktop/r/chapter_2/MoBr/output/files"
# read data
setwd(wd_processed_data)
wide_red <- read.csv("wide_red.csv")
# removing the wired column x
wide_red = wide_red %>% dplyr::select(-X)
# define the first column of species
first_species <- 7
# create species metric
sp_matric <- wide_red[,first_species:length(wide_red)]
# if binned data required:
# 8.1 - 149 m to - 15 m bins (10 breaks)
red_depth_bins <-  wide_red %>% mutate(depth_group = cut(wide_red$depth,
breaks=c(0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 149),
labels=c('7.5', '22.5', '37.5', '52.5', '67.5','82.5', '97.5', '112.5', '127.5', '142.5'))) %>%
relocate(depth_group,.after = depth)
# prepare the plot attributes data frame
plot_attr <- red_depth_bins %>% select(, c(1:7))
# Create the mob_in object
mob_in <- make_mob_in(sp_matric, plot_attr, coord_names = c('lon_x', 'lat_y'))
# Perform the MoB analysis using the depth groups
# 1 - env_var = depth_group (needs to be continuous)
delta_stats_log <- get_delta_stats(mob_in, 'depth_group', type = 'continuous', log_scale = TRUE, n_perm = 199)
delta_stats_not_log <- get_delta_stats(mob_in, 'depth_group', type = 'continuous', n_perm = 199)
delta_red_rev_3_eff <- get_delta_stats(mob_in_rev, env_var = 'depth',
group_var = 'depth_group', stats = c('betas', 'r'),
type = 'continuous', spat_algo = 'kNCN',
n_perm = 199, overall_p = FALSE, inds = c(10,20,30))
delta_red_rev_3_eff <- get_delta_stats(mob_in, 'depth_group', type = 'continuous', n_perm = 199, inds = c(10,20,30))
dev.off()
plot(delta_red_rev_3_eff, 'b1')
plot(delta_red_rev_3_eff, stat = 'b1',  # stat can be changed based on the wanted effect size method
eff_sub_effort = T,          # subset\all samples   #
eff_disp_pts = F,                              # T\F - show the raw effect points
eff_disp_smooth = T)
### env_var = depth_group or env_var = depth completely reverses the results.
mob_in_rev <- mob_in
# Reversing Depth Order to check if it fixes the problem:
mob_in_rev$env$depth_group <- -mob_in_rev$env$depth_group  # Reverse depth sign
delta_stats_rev <- get_delta_stats(mob_in_rev, 'depth_group', type = 'continuous', log_scale = TRUE, n_perm = 199)
# Reversing Depth Order to check if it fixes the problem:
mob_in_rev$env$depth_group <- -mob_in_rev$env$depth_group  # Reverse depth sign
delta_stats_rev <- get_delta_stats(mob_in_rev, 'depth_group',
log_scale = TRUE, n_perm = 199)
mob_in_rev
mob_in
# Reversing Depth Order to check if it fixes the problem:
mob_in_rev$env$depth_group <- -mob_in_rev$env$depth_group  # Reverse depth sign
mob_in_rev
-mob_in_rev$env$depth_group
mob_in_rev$env$depth_group
### env_var = depth_group or env_var = depth completely reverses the results.
mob_in_rev <- mob_in
mob_in_rev$env$depth_group
-mob_in_rev$env$depth_group
plot(delta_stats_not_log, 'b1')      #good option - continuous depth_group not log
library(mobr)# running rarefaction analysis - for gradients
library(dplyr)
library(ggplot2)
# try once before and after 30 m (create 2 data sets), and once for 50 m
before_30 <- mob_in %>% filter(depth_group >= 30)
# try once before and after 30 m (create 2 data sets), and once for 50 m
before_37 <- red_depth_bins %>% filter(depth_group <= 37.5)
red_depth_bins$depth_group <- as.numeric(red_depth_bins$depth_group)
# try once before and after 30 m (create 2 data sets), and once for 50 m
before_37 <- red_depth_bins %>% filter(depth_group <= 37.5)
View(before_37)
# if binned data required:
# 8.1 - 149 m to - 15 m bins (10 breaks)
red_depth_bins <-  wide_red %>% mutate(depth_group = cut(wide_red$depth,
breaks=c(0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 149),
labels=c('7.5', '22.5', '37.5', '52.5', '67.5','82.5', '97.5', '112.5', '127.5', '142.5'))) %>%
relocate(depth_group,.after = depth)
red_depth_bins$depth_group <- as.numeric(as.character(red_depth_bin$depth_group)
# try once before and after 30 m (create 2 data sets), and once for 50 m
before_37 <- red_depth_bins %>% filter(depth_group <= 37.5)
red_depth_bins$depth_group
as.numeric(as.character(red_depth_bin$depth_group)
red_depth_bins$depth_group <- as.numeric(as.character(red_depth_bin$depth_group))
red_depth_bin$depth_group
red_depth_bins$depth_group <- as.numeric(as.character(red_depth_bins$depth_group))
# try once before and after 30 m (create 2 data sets), and once for 50 m
before_37 <- red_depth_bins %>% filter(depth_group <= 37.5)
View(before_37)
after_37 <- red_depth_bins %>% filter(depth_group > 37.5)
before_52 <- red_depth_bins %>% filter(depth_group <= 52.5)
after_52 <- red_depth_bins %>% filter(depth_group > 52.5)
rm(after_37)
rm(after_52)
rm(before_37)
rm(before_52)
# try once before and after 30 m (create 2 data sets), and once for 50 m
under_37 <- red_depth_bins %>% filter(depth_group <= 37.5)
above_37 <- red_depth_bins %>% filter(depth_group > 37.5)
under_52 <- red_depth_bins %>% filter(depth_group <= 52.5)
above_52 <- red_depth_bins %>% filter(depth_group > 52.5)
# create a list from the data frames in order to run a loop:
data_subsets <- list()
# Define breakpoints
breakpoints <- c(37.5, 52.5)
# Function to split data
split_data <- function(df, cutoff) {
list(
under = df %>% filter(as.numeric(as.character(depth_group)) <= cutoff),
above = df %>% filter(as.numeric(as.character(depth_group)) > cutoff)
)
}
# Apply function to all breakpoints
data_subsets <- lapply(breakpoints, function(x) split_data(red_depth_bins, x))
# Flatten list and name elements
data_subsets <- unlist(data_subsets, recursive = FALSE)
names(data_subsets) <- c("under_37", "above_37", "under_52", "above_52")
View(data_subsets)
delta_stats <- list()
for(i in 1:length(data_subsets))
{
# pull one data set:
sub_gr <- data_subsets[[i]]
# prepare the plot attributes data frame
env_attr <- sub_gr %>% select(, c(1:7))
# prepare species matrix
first_species <- 8
sp_matric <- sub_gr[,first_species:length(sub_gr)]
# Create the mob_in object
mob_in <- make_mob_in(sp_matric, env_attr, coord_names = c('lon_x', 'lat_y'))
# calculate delta
one_delta_stats <- get_delta_stats(mob_in, 'depth_group', type = 'continuous', n_perm = 199)
# add the stats results to the list of stats:
delta_stats[[i]] <- one_delta_stats
}
# add the name of the groups to the results:
names(delta_stats) <- names(data_subsets)
plot(delta_stats[[1]], 'b1')
plot(delta_stats$under_37, 'b1')
plot(delta_stats$above_37, 'b1')
plot(delta_stats$under_37, 'b1')
plot(delta_stats$above_37, 'b1')
plot(delta_stats$under_52, 'b1')
plot(delta_stats$above_52, 'b1')
plot(delta_stats$under_37, 'b1')
plot(delta_stats$above_37, 'b1')
plot(delta_stats$above_37, 'b1')
View(delta_stats)
View(data_subsets)
data_subsets[["above_37"]][["depth"]]
plot(delta_stats_not_log, 'b1')      #good option - continuous depth_group not log
# - Define breakpoints
breakpoints <- c(37.5, 52.5, 97.5)
# - create a general function to split the data
split_data <- function(df, cutoff) {
list(
under = df %>% filter(as.numeric(as.character(depth_group)) <= cutoff),
above = df %>% filter(as.numeric(as.character(depth_group)) > cutoff)
)
}
# - Apply function to all breakpoints (x takes each break-point in the list)
data_subsets <- lapply(breakpoints, function(x) split_data(red_depth_bins, x))
# - Flatten list (reduce from 2 lists to a united one) and name the elements
data_subsets <- unlist(data_subsets, recursive = FALSE)
names(data_subsets) <- c("under_37", "above_37", "under_52", "above_52")
names(data_subsets) <- c("under_37", "above_37", "under_52", "above_52", "under_97", "above_97")
names(data_subsets)
data_subsets
delta_stats <- list()
for(i in 5:length(data_subsets))
{
# pull one data set:
sub_gr <- data_subsets[[i]]
# prepare the plot attributes data frame
env_attr <- sub_gr %>% select(, c(1:7))
# prepare species matrix
first_species <- 8
sp_matric <- sub_gr[,first_species:length(sub_gr)]
# Create the mob_in object
mob_in <- make_mob_in(sp_matric, env_attr, coord_names = c('lon_x', 'lat_y'))
# calculate delta
one_delta_stats <- get_delta_stats(mob_in, 'depth_group', type = 'continuous', n_perm = 199)
# add the stats results to the list of stats:
delta_stats[[i]] <- one_delta_stats
}
# add the name of the groups to the results:
names(delta_stats) <- names(data_subsets)
plot(delta_stats$under_97, 'b1')
plot(delta_stats$above_97, 'b1')
# - Define breakpoints
breakpoints <- c(37.5, 52.5)
# - create a general function to split the data
split_data <- function(df, cutoff) {
list(
under = df %>% filter(as.numeric(as.character(depth_group)) <= cutoff),
above = df %>% filter(as.numeric(as.character(depth_group)) > cutoff)
)
}
# - Apply function to all breakpoints (x takes each break-point in the list)
data_subsets <- lapply(breakpoints, function(x) split_data(red_depth_bins, x))
# - Flatten list (reduce from 2 lists to a united one) and name the elements
data_subsets <- unlist(data_subsets, recursive = FALSE)
names(data_subsets) <- c("under_37", "above_37", "under_52", "above_52")
delta_stats <- list()
for(i in 1:length(data_subsets))
{
# pull one data set:
sub_gr <- data_subsets[[i]]
# prepare the plot attributes data frame
env_attr <- sub_gr %>% select(, c(1:7))
# prepare species matrix
first_species <- 8
sp_matric <- sub_gr[,first_species:length(sub_gr)]
# Create the mob_in object
mob_in <- make_mob_in(sp_matric, env_attr, coord_names = c('lon_x', 'lat_y'))
# calculate delta
one_delta_stats <- get_delta_stats(mob_in, 'depth_group', type = 'continuous', n_perm = 199)
# add the stats results to the list of stats:
delta_stats[[i]] <- one_delta_stats
}
# add the name of the groups to the results:
names(delta_stats) <- names(data_subsets)
plot(delta_stats$under_37, 'b1')
plot(delta_stats$above_37, 'b1')
plot(delta_stats$under_52, 'b1')
plot(delta_stats$above_52, 'b1')
library(mobr)# running rarefaction analysis - for gradients
library(dplyr)
library(ggplot2)
# read
# wd
wd_processed_data <- "C:/Users/inbar/OneDrive/desktop/r/chapter_2/MoBr/data/processed"
wd_plots <- "C:/Users/inbar/OneDrive/desktop/r/chapter_2/MoBr/output/plots"
wd_results <- "C:/Users/inbar/OneDrive/desktop/r/chapter_2/MoBr/output/files"
# read data
setwd(wd_processed_data)
wide_red <- read.csv("wide_red.csv")
# removing the wired column x
wide_red = wide_red %>% dplyr::select(-X)
# define the first column of species
first_species <- 7
# create species metric
sp_matric <- wide_red[,first_species:length(wide_red)]
# if binned data required:
# 8.1 - 149 m to - 15 m bins (10 breaks)
red_depth_bins <-  wide_red %>% mutate(depth_group = cut(wide_red$depth,
breaks=c(0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 149),
labels=c('7.5', '22.5', '37.5', '52.5', '67.5','82.5', '97.5', '112.5', '127.5', '142.5'))) %>%
relocate(depth_group,.after = depth)
# prepare the plot attributes data frame
plot_attr <- red_depth_bins %>% select(, c(1:7))
# Create the mob_in object
mob_in <- make_mob_in(sp_matric, plot_attr, coord_names = c('lon_x', 'lat_y'))
# Perform the MoB analysis using the depth groups
# 1 - env_var = depth_group (needs to be continuous)
delta_stats_log <- get_delta_stats(mob_in, 'depth_group', type = 'continuous', log_scale = TRUE, n_perm = 199)
delta_stats_not_log <- get_delta_stats(mob_in, 'depth_group', type = 'continuous', n_perm = 199)
# results
dev.off()
plot(delta_stats, 'b1')
plot(delta_stats_log, 'b1')          # good option - continuous depth_group log
plot(delta_stats_not_log, 'b1')      #good option - continuous depth_group not log
delta_red_rev_3_eff <- get_delta_stats(mob_in, 'depth_group', type = 'continuous', n_perm = 199, inds = c(10,20,30))
red_depth_bins$depth_group <- as.numeric(as.character(red_depth_bins$depth_group))
# - Define breakpoints
breakpoints <- c(37.5, 52.5)
# - create a general function to split the data
split_data <- function(df, cutoff) {
list(
under = df %>% filter(as.numeric(as.character(depth_group)) <= cutoff),
above = df %>% filter(as.numeric(as.character(depth_group)) > cutoff)
)
}
# - Apply function to all breakpoints (x takes each break-point in the list)
data_subsets <- lapply(breakpoints, function(x) split_data(red_depth_bins, x))
# - Flatten list (reduce from 2 lists to a united one) and name the elements
data_subsets <- unlist(data_subsets, recursive = FALSE)
names(data_subsets) <- c("under_37", "above_37", "under_52", "above_52")
delta_stats <- list()
for(i in 1:length(data_subsets))
{
# pull one data set:
sub_gr <- data_subsets[[i]]
# prepare the plot attributes data frame
env_attr <- sub_gr %>% select(, c(1:7))
# prepare species matrix
first_species <- 8
sp_matric <- sub_gr[,first_species:length(sub_gr)]
# Create the mob_in object
mob_in <- make_mob_in(sp_matric, env_attr, coord_names = c('lon_x', 'lat_y'))
# calculate delta
one_delta_stats <- get_delta_stats(mob_in, 'depth_group', type = 'continuous', n_perm = 199)
# add the stats results to the list of stats:
delta_stats[[i]] <- one_delta_stats
}
# add the name of the groups to the results:
names(delta_stats) <- names(data_subsets)
plot(delta_stats$under_37, 'b1')
plot(delta_stats$above_37, 'b1')
plot(delta_stats$under_52, 'b1')
plot(delta_stats$above_52, 'b1')
plot(delta_stats$under_37, 'b1')
plot(delta_stats$above_37, 'b1')
plot(delta_stats$under_52, 'b1')
plot(delta_stats$above_52, 'b1')
plot(delta_stats$under_52, 'b1')
above_52
plot(delta_stats$above_52, 'b1')
gc()
gc()
